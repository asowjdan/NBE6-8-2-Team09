<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/charge/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/charge/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/charge - 지갑 충전&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/charge`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 충전 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/charge - 지갑 충전&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/charge`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 충전 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/purchase/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/purchase/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/purchase - 코인 구매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/purchase`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 구매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/purchase - 코인 구매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/purchase`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 구매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// GET /api/wallets/users/[userId] - 지갑 정보 조회&#10;export async function GET(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 조회 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// GET /api/wallets/users/[userId] - 지갑 정보 조회&#10;export async function GET(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('지갑 조회 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/sell/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/wallets/users/[userId]/sell/route.ts" />
              <option name="originalContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/sell - 코인 판매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/sell`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 판매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import { NextRequest, NextResponse } from 'next/server';&#10;&#10;const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8080';&#10;&#10;// POST /api/wallets/users/[userId]/sell - 코인 판매&#10;export async function POST(&#10;    request: NextRequest,&#10;    { params }: { params: { userId: string } }&#10;) {&#10;    try {&#10;        const { userId } = params;&#10;        const body = await request.json();&#10;&#10;        const response = await fetch(`${BACKEND_URL}/api/wallets/users/${userId}/sell`, {&#10;            method: 'POST',&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                // 프론트엔드에서 받은 쿠키를 백엔드로 전달&#10;                'Cookie': request.headers.get('cookie') || '',&#10;            },&#10;            body: JSON.stringify(body),&#10;        });&#10;&#10;        if (!response.ok) {&#10;            const errorData = await response.json().catch(() =&gt; ({&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            }));&#10;&#10;            return NextResponse.json(errorData, { status: response.status });&#10;        }&#10;&#10;        const data = await response.json();&#10;        return NextResponse.json(data);&#10;    } catch (error) {&#10;        console.error('코인 판매 에러:', error);&#10;        return NextResponse.json(&#10;            {&#10;                status: 500,&#10;                code: 'INTERNAL_SERVER_ERROR',&#10;                message: '서버 내부 오류가 발생했습니다.'&#10;            },&#10;            { status: 500 }&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/api/client.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/api/client.ts" />
              <option name="originalContent" value="// API 호출 공통 함수&#10;&#10;// 백엔드 에러 응답 타입 정의&#10;export interface ErrorResponse {&#10;    status: number;&#10;    code: string;&#10;    message: string;&#10;    timestamp?: string;&#10;}&#10;&#10;// API 기본 설정&#10;const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api';&#10;&#10;/**&#10; * 공통 API 호출 헬퍼 함수&#10; */&#10;export async function apiCall&lt;T&gt;(&#10;    endpoint: string,&#10;    options: RequestInit = {}&#10;): Promise&lt;T | null&gt; {&#10;    try {&#10;        const response = await fetch(`${API_BASE_URL}${endpoint}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                ...options.headers,&#10;            },&#10;            ...options,&#10;        });&#10;&#10;        if (response.ok) {&#10;            return await response.json();&#10;        }&#10;&#10;        // 에러 응답 처리&#10;        let errorData: ErrorResponse;&#10;        try {&#10;            errorData = await response.json();&#10;        } catch {&#10;            // JSON 파싱 실패 시 기본 에러 메시지&#10;            errorData = {&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            };&#10;        }&#10;&#10;        // 에러를 throw해서 catch 블록에서 처리할 수 있도록 함&#10;        const error = new Error(errorData.message) as Error &amp; ErrorResponse;&#10;        error.status = errorData.status;&#10;        error.code = errorData.code;&#10;        throw error;&#10;&#10;    } catch (error) {&#10;        // 네트워크 에러 등의 경우&#10;        if (error instanceof Error &amp;&amp; !('status' in error)) {&#10;            console.error('네트워크 에러:', error);&#10;            const networkError = new Error('네트워크 연결을 확인해주세요.') as Error &amp; ErrorResponse;&#10;            networkError.status = 0;&#10;            networkError.code = 'NETWORK_ERROR';&#10;            throw networkError;&#10;        }&#10;        throw error;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// API 호출 공통 함수&#10;&#10;// 백엔드 에러 응답 타입 정의&#10;export interface ErrorResponse {&#10;    status: number;&#10;    code: string;&#10;    message: string;&#10;    timestamp?: string;&#10;}&#10;&#10;// API 기본 설정&#10;const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080/api';&#10;&#10;/**&#10; * 공통 API 호출 헬퍼 함수&#10; */&#10;export async function apiCall&lt;T&gt;(&#10;    endpoint: string,&#10;    options: RequestInit = {}&#10;): Promise&lt;T | null&gt; {&#10;    try {&#10;        const response = await fetch(`${API_BASE_URL}${endpoint}`, {&#10;            headers: {&#10;                'Content-Type': 'application/json',&#10;                ...options.headers,&#10;            },&#10;            credentials: 'include', // 쿠키 자동 전송&#10;            ...options,&#10;        });&#10;&#10;        if (response.ok) {&#10;            return await response.json();&#10;        }&#10;&#10;        // 에러 응답 처리&#10;        let errorData: ErrorResponse;&#10;        try {&#10;            errorData = await response.json();&#10;        } catch {&#10;            // JSON 파싱 실패 시 기본 에러 메시지&#10;            errorData = {&#10;                status: response.status,&#10;                code: `${response.status}-ERROR`,&#10;                message: response.statusText || '서버 오류가 발생했습니다.'&#10;            };&#10;        }&#10;&#10;        // 에러를 throw해서 catch 블록에서 처리할 수 있도록 함&#10;        const error = new Error(errorData.message) as Error &amp; ErrorResponse;&#10;        error.status = errorData.status;&#10;        error.code = errorData.code;&#10;        throw error;&#10;&#10;    } catch (error) {&#10;        // 네트워크 에러 등의 경우&#10;        if (error instanceof Error &amp;&amp; !('status' in error)) {&#10;            console.error('네트워크 에러:', error);&#10;            const networkError = new Error('네트워크 연결을 확인해주세요.') as Error &amp; ErrorResponse;&#10;            networkError.status = 0;&#10;            networkError.code = 'NETWORK_ERROR';&#10;            throw networkError;&#10;        }&#10;        throw error;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/lib/api/wallet.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/api/wallet.ts" />
              <option name="originalContent" value="import { apiCall } from './client';&#10;import type { WalletDto, ChargeDto, BuyCoinRequest } from '@/lib/types/wallet';&#10;&#10;// 지갑 API 호출들&#10;export const walletApi = {&#10;    // 사용자 지갑 전체 조회 (모든 코인 포함)&#10;    getWallet: (userId: number) =&gt;&#10;        apiCall&lt;WalletDto&gt;(`/wallets/users/${userId}`),&#10;&#10;    // 충전&#10;    charge: (userId: number, amount: number) =&gt; {&#10;        const chargeDto: ChargeDto = { amount };&#10;        return apiCall(`/wallets/users/${userId}/charge`, {&#10;            method: 'POST',&#10;            body: JSON.stringify(chargeDto),&#10;        });&#10;    },&#10;&#10;    // 코인 구매&#10;    purchase: (userId: number, request: BuyCoinRequest) =&gt;&#10;        apiCall&lt;WalletDto&gt;(`/wallets/users/${userId}/purchase`, {&#10;            method: 'POST',&#10;            body: JSON.stringify(request),&#10;        }),&#10;&#10;    // 코인 판매&#10;    sell: (userId: number, request: BuyCoinRequest) =&gt;&#10;        apiCall&lt;WalletDto&gt;(`/wallets/users/${userId}/sell`, {&#10;            method: 'POST',&#10;            body: JSON.stringify(request),&#10;        }),&#10;};&#10;" />
              <option name="updatedContent" value="import { apiCall } from './client';&#10;import type { WalletDto, ChargeDto, BuyCoinRequest } from '@/lib/types/wallet';&#10;&#10;// 지갑 API 호출들&#10;export const walletApi = {&#10;    // 사용자 지갑 전체 조회 (모든 코인 포함) - Next.js API Routes 경로로 수정&#10;    getWallet: (userId: number) =&gt;&#10;        apiCall&lt;WalletDto&gt;(`/wallets/users/${userId}`),&#10;&#10;    // 충전 - Next.js API Routes 경로로 수정&#10;    charge: (userId: number, amount: number) =&gt; {&#10;        const chargeDto: ChargeDto = { amount };&#10;        return apiCall(`/wallets/users/${userId}/charge`, {&#10;            method: 'POST',&#10;            body: JSON.stringify(chargeDto),&#10;        });&#10;    },&#10;&#10;    // 코인 구매 - Next.js API Routes 경로로 수정&#10;    purchase: (userId: number, request: BuyCoinRequest) =&gt;&#10;        apiCall&lt;WalletDto&gt;(`/wallets/users/${userId}/purchase`, {&#10;            method: 'POST',&#10;            body: JSON.stringify(request),&#10;        }),&#10;&#10;    // 코인 판매 - Next.js API Routes 경로로 수정&#10;    sell: (userId: number, request: BuyCoinRequest) =&gt;&#10;        apiCall&lt;WalletDto&gt;(`/wallets/users/${userId}/sell`, {&#10;            method: 'POST',&#10;            body: JSON.stringify(request),&#10;        }),&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>